# Name of your application. Used to uniquely configure containers.
service: diet-app

# Name of the container image.
image: damianszalbik/diet-app

# Deploy to these servers.
servers:
  web:
    hosts:
      - "167.99.137.233"

  job:
    hosts:
      - "167.99.137.233"
    # Or something like bin/job
    cmd: bundle exec sidekiq -C config/sidekiq.yml

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  app_port: 3000
  ssl: true
  host: diety.rubydive.com
  healthcheck:
    interval: 5
    path: /up
    timeout: 30

# Credentials for your image host.
registry:
  username: damianszalbik
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch:
    - amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= File.read('.ruby-version').strip %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  secret:
    - RAILS_MASTER_KEY
#   clear:
#     DB_HOST: 192.168.0.2

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
aliases:
  shell: app exec --interactive --reuse "bash"
  console: app exec --interactive --reuse "bin/rails console"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"
  apps: server exec docker exec kamal-proxy kamal-proxy list

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
volumes:
  - storage:/rails/storage


# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  # clear:
    # DB_HOST: 192.168.0.2
  secret:
    - RAILS_MASTER_KEY


# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:latest
    host: "167.99.137.233"
    port: "127.0.0.1:5432:5433"
    env:
      secret:
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_DB
    directories:
      - data:/var/lib/postgresql/data
  redis:
    image: redis:latest
    host: "167.99.137.233"
    port: "127.0.0.1:6379:6380"
    cmd: --maxmemory 200m --maxmemory-policy allkeys-lru
    options:
      memory: 250m
    volumes:
      - redis_data:/data
